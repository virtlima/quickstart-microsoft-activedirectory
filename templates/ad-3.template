AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates a managed Microsoft AD Directory Service into private subnets
  in separate Availability Zones inside a VPC. The default Domain Administrator user
  is 'admin'. For adding members to the domain, ensure that they are launched into
  the domain member security group created by this template and then configure them
  to use the AD instances fixed private IP addresses as the DNS server. **WARNING**
  This template creates Amazon EC2 Windows instance and related resources. You will
  be billed for the AWS resources used if you create a stack from this template. QS(0021)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCCIDR
          - VPCID
          - PrivateSubnet1CIDR
          - PrivateSubnet1ID
          - PrivateSubnet2CIDR
          - PrivateSubnet2ID
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainAdminPassword
          - ADEdition
      - Label:
          default: AWS Systems Manager AMI configuration
        Parameters:
          - WS2019FULLBASE
          - KeyPairName
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
    ParameterLabels:
      DomainAdminPassword:
        default: Domain Admin Password
      DomainDNSName:
        default: Domain DNS Name
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      ADEdition:
        default: AWS Microsoft AD edition
      KeyPairName:
        default: Key pair name
      PrivateSubnet1CIDR:
        default: Private Subnet 1 CIDR
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2CIDR:
        default: Private Subnet 2 CIDR
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PublicSubnet1CIDR:
        default: Public Subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public Subnet 2 CIDR
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 Bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      VPCCIDR:
        default: VPC CIDR
      VPCID:
        default: VPC ID
      WS2019FULLBASE: 
        default: Windows Server 2019 full base AMI
Parameters:
  DomainAdminPassword:
    Description: Password for the domain admin user. Must be at least 8 characters
      containing letters, numbers and symbols
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: 'true'
  DomainDNSName:
    Description: Fully qualified domain name (FQDN) of the forest root domain e.g.
      example.com
    Type: String
    Default: example.com
    MinLength: '2'
    MaxLength: '255'
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
  DomainNetBIOSName:
    Description: NetBIOS name of the domain (upto 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    Type: String
    Default: example
    MinLength: '1'
    MaxLength: '15'
    AllowedPattern: '[a-zA-Z0-9\-]+'
  ADEdition:
    AllowedValues:
      - Standard
      - Enterprise
    Default: Enterprise
    Description: The AWS Microsoft AD edition. Valid values include Standard and Enterprise.
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1.
    Type: String
  PrivateSubnet1ID:
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2.
    Type: String
  PrivateSubnet2ID:
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone
      1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR Block for the public DMZ subnet 2 located in Availability Zone
      2
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-microsoft-activedirectory/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  KeyPairName:
    Description: Public/private key pair, which allows you to securely connect to your instance
      after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  WS2019FULLBASE:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Resources:
  QuickStartLogs:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
      RetentionInDays: 30
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    DependsOn: 
      - MicrosoftAD
      - SSMWaitCondition
    Properties:
      DomainName: !Ref 'DomainDNSName'
      DomainNameServers: !GetAtt 'MicrosoftAD.DnsIpAddresses'
      Tags:
        - Key: Domain
          Value: !Ref 'DomainDNSName'
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPCID'
      DhcpOptionsId: !Ref 'DHCPOptions'
  ADAdminSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'ADAdminSecret-${AWS::StackName}'
      Description: Admin User Seccrets for Manged AD Quick Start
      SecretString: !Sub '{"username":"Admin","password":"${DomainAdminPassword}"}'
  MicrosoftAD:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Name: !Ref 'DomainDNSName'
      Edition: !Ref 'ADEdition'
      ShortName: !Ref 'DomainNetBIOSName'
      Password: !Ref 'DomainAdminPassword'
      VpcSettings:
        SubnetIds:
          - !Ref 'PrivateSubnet1ID'
          - !Ref 'PrivateSubnet2ID'
        VpcId: !Ref 'VPCID'
  DomainMemberSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Members
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5985
          ToPort: 5985
          CidrIp: !Ref 'PrivateSubnet1CIDR'
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref 'PrivateSubnet1CIDR'
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref 'PrivateSubnet1CIDR'
        - IpProtocol: tcp
          FromPort: 49152
          ToPort: 65535
          CidrIp: !Ref 'PrivateSubnet1CIDR'
        - IpProtocol: udp
          FromPort: 49152
          ToPort: 65535
          CidrIp: !Ref 'PrivateSubnet1CIDR'
        - IpProtocol: tcp
          FromPort: 5985
          ToPort: 5985
          CidrIp: !Ref 'PrivateSubnet2CIDR'
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref 'PrivateSubnet2CIDR'
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref 'PrivateSubnet2CIDR'
        - IpProtocol: tcp
          FromPort: 49152
          ToPort: 65535
          CidrIp: !Ref 'PrivateSubnet2CIDR'
        - IpProtocol: udp
          FromPort: 49152
          ToPort: 65535
          CidrIp: !Ref 'PrivateSubnet2CIDR'
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'PublicSubnet1CIDR'
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'PublicSubnet2CIDR'
        - IpProtocol: tcp
          FromPort: 636
          ToPort: 636
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 3269
          ToPort: 3269
          CidrIp: !Ref VPCCIDR
  SSMAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: "*"
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
          PolicyName: aws-quick-start-cfn-signal-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePolicy
                  - iam:getRolePolicy
                  - iam:DetachRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:CreateInstanceProfile
                  - iam:DeleteRole
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:PassRole
                Resource: '*'
          PolicyName: aws-quick-start-create-role-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref 'ADAdminSecrets'
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: '*'
          PolicyName: AD-SSM-Secrets
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCloudFormationFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess'
  LambdaSSMRole:
    DependsOn: MicrosoftAD
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
           Version: '2012-10-17'
           Statement:
             - Effect: Allow
               Action:
                 - iam:PassRole
               Resource: !GetAtt SSMAutomationRole.Arn
          PolicyName: QS-SSM-PassRole
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole'
  DNSForwarderSetup:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: Setup DNS Forwarder for AWS Managed AD to VPC DNS
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          StackName:
            description: "Stack Name Input for cfn resource signal"
            type: "String"
          DomainMemberSG:
            description: Security group ID that can communicate with domain controllers
            type: "String"
          VPCCIDR:
            description: VPC CIDR
            type: "String"
          QSS3BucketName:
            description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
            type: "String"
          QSS3BucketRegion:
            default: "us-east-1"
            description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
            type: "String"
          QSS3KeyPrefix:
            description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
            type: "String"
          PrivateSubnet1ID:
            description: "Private Subnet 1 ID"
            type: "String"
          AutomationAssumeRole:
            description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
            type: "String"
          KeyPairName:
            description: "Key pair to use for the ephemeral instance"
            type: "String"
          DirectoryID:
            description: "Alias of the directory ID"
            type: "String"
          AWSRegion:
            description: "Region"
            type: "String"
          URLSuffix:
            default: "amazonaws.com"
            description: "AWS URL suffix"
            type: "String"
        mainSteps:
        - name:  CreateStack
          action: aws:createStack
          onFailure: "step:CFNSignalEnd"
          inputs:
            StackName: "SetDNSForwarder"
            Capabilities: [ "CAPABILITY_IAM" ]
            TemplateBody: |
              Description: "Deploy Instance to create DNS forwarder on AWS Managed AD"
              Parameters:
                WINFULLBASE:
                  Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
                  Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
                QSS3BucketName:
                  Type: "String"
                  Default: "{{QSS3BucketName}}"
                  Description: "Name of Target S3 Bucket"
                QSS3BucketRegion:
                  Default: "us-east-1"
                  Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
                  Type: "String"
                QSS3KeyPrefix:
                  Type: "String"
                  Default: "{{QSS3KeyPrefix}}"
                  Description: "Name of Target S3 Prefix"
                SecurityGroup:
                  Description: Security Group to be able to talk Domain Controllers
                  Default: "{{DomainMemberSG}}"
                  Type: "String"
                Subnet:
                  Description: "Subnet to deploy the EC2 instnace"
                  Default: "{{PrivateSubnet1ID}}"
                  Type: "String"
                KeyPairName:
                  Description: "Key pair name for the ephemeral instance"
                  Default: "{{KeyPairName}}"
                  Type: "String"
              Resources:
                ForwarderRole: 
                  Type : AWS::IAM::Role
                  Properties:
                    Policies:
                      - PolicyDocument:
                          Version: '2012-10-17'
                          Statement:
                            - Action:
                                - s3:GetObject
                                - s3:ListBucket
                              Resource: "*"
                              Effect: Allow
                        PolicyName: s3-instance-bucket-policy
                    Path: /
                    ManagedPolicyArns:
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSDirectoryServiceFullAccess'
                    AssumeRolePolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                      - Effect: "Allow"
                        Principal:
                          Service:
                          - "ec2.amazonaws.com"
                          - "ssm.amazonaws.com"
                        Action: "sts:AssumeRole"
                IamInstanceProfile:
                  Type: "AWS::IAM::InstanceProfile"
                  Properties:
                    Roles:
                    - !Ref ForwarderRole
                EC2Instance:
                  Type: "AWS::EC2::Instance"
                  Properties:
                    ImageId: !Ref WINFULLBASE
                    InstanceType: "t3.medium"
                    IamInstanceProfile: !Ref IamInstanceProfile
                    SecurityGroupIds:
                      - !Ref 'SecurityGroup'
                    SubnetId: !Ref Subnet
                    KeyName: !Ref KeyPairName
                    Tags:
                    - Key: "Name"
                      Value: "TempDNSForwarder"
        - name: "getInstanceId"
          action: aws:executeAwsApi
          onFailure: "step:CFNSignalEnd"
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: "tag:Name"
              Values: [ "TempDNSForwarder" ]
            - Name: "instance-state-name"
              Values: [ "running" ]
          outputs:
          - Name: InstanceId
            Selector: "$.Reservations[0].Instances[0].InstanceId"
            Type: String
        - name: "CreateDNSForward"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
              - "{{getInstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
              CloudWatchLogGroupName: !Ref 'QuickStartLogs'
            Parameters:
              sourceType: "S3"
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/AddDNSForward.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: "./AddDNSForward.ps1 -DirectoryID {{DirectoryID}} -VPCCIDR {{VPCCIDR}} -AWSRegion {{AWSRegion}}"
        # Determines if CFN Needs to be Signaled or if Work flow should just end
        - name: CFNSignalEnd
          action: aws:branch
          inputs:
            Choices:
            - NextStep: signalsuccess
              Not: 
                Variable: "{{StackName}}"
                StringEquals: ""
            - NextStep: sleepend
              Variable: "{{StackName}}"
              StringEquals: ""
        # If all steps complete successfully signals CFN of Success
        - name: "signalsuccess"
          action: "aws:executeAwsApi"
          nextStep: "deleteStack"
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: "SSMWaitCondition"
            StackName: "{{StackName}}"
            Status: SUCCESS
            UniqueId: "{{getInstanceId.InstanceId}}"
        # If CFN Signl Not Needed this sleep ends work flow
        - name: "sleepend"
          action: "aws:sleep"
          nextStep: "deleteStack"
          inputs:
            Duration: PT1S
        # If any steps fails signals CFN of Failure
        - name: "signalfailure"
          action: "aws:executeAwsApi"
          nextStep: "deleteStack"
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: "SSMWaitCondition"
            StackName: "{{StackName}}"
            Status: FAILURE
            UniqueId: "{{getInstanceId.InstanceId}}"
        - name: deleteStack
          action: aws:deleteStack
          isEnd: true
#          onFailure: Continue
          inputs:
            StackName: "SetDNSForwarder"
  LambdaSSMExecute:
    DependsOn: LambdaSSMRole
    Type: AWS::Lambda::Function
    Properties:
      Description: Executes SSM Automation Documents
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt LambdaSSMRole.Arn
      Timeout: 900
      Code:
        ZipFile: |
          def handler(event, context):
              import cfnresponse
              import boto3, os, json
              from botocore.vendored import requests
          
              ssm_cl = boto3.client('ssm')
              ecr_cl = boto3.client('ecr')
              req_type = event['RequestType']
              print(event)
          
              SUCCESS = "SUCCESS"
              FAILED = "FAILED"
          
              def start_ssmautomation(event):
                  doc_name = event['ResourceProperties']['DocumentName']
                  stack_name = event['ResourceProperties']['StackName']
                  ssm_role = event['ResourceProperties']['AutomationAssumeRole']
                  qs_bucket = event['ResourceProperties']['QSS3BucketName']
                  qs_region = event['ResourceProperties']['QSS3BucketRegion']
                  qs_bucket_prefix = event['ResourceProperties']['QSS3KeyPrefix']
                  security_group = event['ResourceProperties']['DomainMemberSG']
                  subnet_id = event['ResourceProperties']['PrivateSubnet1ID']
                  key_name = event['ResourceProperties']['KeyPairName']
                  vpc_cidr = event['ResourceProperties']['VPCCIDR']
                  directory_id = event['ResourceProperties']['DirectoryID']
                  aws_region = event['ResourceProperties']['AWSRegion']
                  url_suffix = event['ResourceProperties']['URLSuffix']

                  if qs_bucket == "aws-quickstart":
                    qs_bucket = "aws-quickstart-" + qs_region
          
                  start_automation = ssm_cl.start_automation_execution(
                      DocumentName= doc_name,
                      Parameters={
                          'StackName': [
                              stack_name
                          ],
                          'AutomationAssumeRole': [
                              ssm_role
                          ],
                          'QSS3BucketName': [
                              qs_bucket
                          ],
                          'QSS3BucketRegion': [
                              qs_region
                          ],
                          'QSS3KeyPrefix': [
                              qs_bucket_prefix
                          ],
                          'DomainMemberSG': [
                              security_group
                          ],
                          'PrivateSubnet1ID': [
                              subnet_id
                          ],
                          'KeyPairName': [
                              key_name
                          ],
                          'VPCCIDR': [
                              vpc_cidr
                          ],
                          'DirectoryID': [
                              directory_id
                          ],
                          'AWSRegion': [
                              aws_region
                          ],
                          'URLSuffix': [
                              url_suffix
                          ]
                      },
                  )
          
                  cfnresponse.send(event, context, SUCCESS, start_automation, start_automation['AutomationExecutionId'])
              
              def delete_image(event):
                  cfnresponse.send(event, context, SUCCESS, event, "Deleted")

              actions = {
                  'Create': start_ssmautomation,
                  'Delete': delete_image,
                  'Update': start_ssmautomation
              }
          
              try:
                  actions.get(req_type)(event)    
              except Exception as exc:
                  error_msg = {'Error': '{}'.format(exc)}
                  print(error_msg)
                  cfnresponse.send(event, context, FAILED, error_msg)
  ExecuteSSMAutomation:
    DependsOn: LambdaSSMExecute
    Type: Custom::ExecuteSSMAutomation
    Properties: 
      ServiceToken: !GetAtt LambdaSSMExecute.Arn
      DocumentName: !Ref DNSForwarderSetup
      DomainMemberSG: !Ref DomainMemberSG
      StackName: !Ref AWS::StackName
      QSS3BucketName: !Ref QSS3BucketName
      QSS3BucketRegion: !Ref QSS3BucketRegion
      QSS3KeyPrefix: !Ref QSS3KeyPrefix
      AutomationAssumeRole: !GetAtt SSMAutomationRole.Arn
      PrivateSubnet1ID: !Ref PrivateSubnet1ID
      KeyPairName: !Ref KeyPairName
      VPCCIDR: !Ref VPCCIDR
      DirectoryID: !GetAtt 'MicrosoftAD.Alias'
      AWSRegion: !Ref 'AWS::Region'
      URLSuffix: !Ref 'AWS::URLSuffix'
  SSMWaitHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle
  SSMWaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    DependsOn: 
      - ExecuteSSMAutomation
      - SSMWaitHandle
    Properties: 
      Handle: 
        Ref: "SSMWaitHandle"
      Timeout: "3600"
      Count: 1
  AWSQuickstartADRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ssm:*
                Resource: '*'
          PolicyName: AD-SSM-AutomationExecution
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'

Outputs:
  ADServer1PrivateIP:
    Value: !Select
      - '0'
      - !GetAtt 'MicrosoftAD.DnsIpAddresses'
    Description: AD Server 1 Private IP Address (this may vary based on Directory
      Service order of IP addresses)
  ADServer2PrivateIP:
    Value: !Select
      - '1'
      - !GetAtt 'MicrosoftAD.DnsIpAddresses'
    Description: AD Server 2 Private IP Address (this may vary based on Directory
      Service order of IP addresses)
  DirectoryID:
    Value: !Ref 'MicrosoftAD'
    Description: Directory Services ID
  DomainAdmin:
    Value: !Join
      - ''
      - - !Ref 'DomainNetBIOSName'
        - \admin
    Description: Domain administrator account
  DomainMemberSGID:
    Value: !Ref 'DomainMemberSG'
    Description: Domain Member Security Group ID
  ADSecretsArn:
    Value: !Ref 'ADAdminSecrets'
    Description: Managed AD Admin Secrets
